trigger:
- master
- dev

variables:
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
  DISPLAY: :99.0

jobs:
  - job: Build
    timeoutInMinutes: 240
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macOS-10.14'
        vs2017:
          imageName: 'vs2017-win2016'
          vsLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise'
        vs2019:
          imageName: 'windows-2019'
          vsLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
    pool:
      vmImage: $(imageName)

    steps:
    - script: sudo apt-get -y install bison flex
      displayName: 'Install bison and flex (Linux)'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - task: CacheBeta@0
      displayName: Gradle build cache
      inputs:
        key: '$(Agent.OS)-gradle-home'
        path: $(GRADLE_USER_HOME)

    - script: brew install bison flex && brew link bison --force && brew link flex --force
      displayName: 'Install bison and flex (Mac)'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    - script: gradle --init-script gradle/support/fetchDependencies.gradle init
      displayName: 'Init flat directory-style repository'

    - script: curl https://netix.dl.sourceforge.net/project/winflexbison/win_flex_bison-latest.zip -O
      displayName: 'Download bison and flex (Windows)'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - task: ExtractFiles@1
      displayName: 'Extract bison and flex (Windows)'
      inputs:
        archiveFilePatterns: 'win_flex_bison-latest.zip'
        destinationFolder: $(Agent.ToolsDirectory)/bison
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - script: |
        move /Y $(Agent.ToolsDirectory)\bison\win_bison.exe $(Agent.ToolsDirectory)\bison\bison.exe
        move /Y $(Agent.ToolsDirectory)\bison\win_flex.exe $(Agent.ToolsDirectory)\bison\flex.exe
        echo '##vso[task.setvariable variable=PATH;]$(Agent.ToolsDirectory)\bison;$(PATH)'
      displayName: 'Set PATH to bison and flex (Windows)'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - script: gradle wrapper
      displayName: 'Create wrapper task'

    - script: (/usr/bin/Xvfb :99 -screen 0 1280x1024x24 &)
      displayName: "Start Xvfb for DISPLAY=$(DISPLAY)"
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

    - task: Gradle@2
      displayName: 'gradlew buildGhidra'
      inputs:
        workingDirectory: ''
        options: '--build-cache'
        tasks: buildGhidra
        jdkVersionOption: 1.11

    - task: Gradle@2
      displayName: 'gradlew unitTestReport'
      inputs:
        workingDirectory: ''
        options: '--build-cache'
        tasks: unitTestReport
        jdkVersionOption: 1.11

    - task: Gradle@2
      displayName: 'gradlew integrationTest'
      inputs:
        workingDirectory: ''
        options: '--build-cache'
        tasks: integrationTest
        jdkVersionOption: 1.11
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), notIn(variables['Build.Reason'], 'PullRequest', 'CheckInShelveset'))

    - task: Gradle@2
      displayName: 'gradlew --stop'
      inputs:
        workingDirectory: ''
        options: '--stop'
        jdkVersionOption: 1.11

    - task: CopyFiles@2
      inputs:
        sourceFolder: 'build/dist'
        targetFolder: '$(build.artifactstagingdirectory)'
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), notIn(variables['Build.Reason'], 'PullRequest', 'CheckInShelveset'))

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: artifacts
        artifactType: Container
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), notIn(variables['Build.Reason'], 'PullRequest', 'CheckInShelveset'))
